require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe TdocsController do

  def mock_tdoc(stubs={})
    @mock_tdoc ||= mock_model(Tdoc, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all tdocs as @tdocs" do
      Tdoc.stub(:all) { [mock_tdoc] }
      get :index
      #assigns(:tdocs).should eq([mock_tdoc])
      assigns(:tdocs).should eq([])
    end
  end

  describe "GET show" do
    it "assigns the requested tdoc as @tdoc" do
      Tdoc.stub(:find).with("37") { mock_tdoc }
      get :show, :id => "37"
      assigns(:tdoc).should be(mock_tdoc)
    end
  end

  describe "GET new" do
    it "assigns a new tdoc as @tdoc" do
      Tdoc.stub(:new) { mock_tdoc }
      get :new
      assigns(:tdoc).should be(mock_tdoc)
    end
  end

  describe "GET edit" do
    it "assigns the requested tdoc as @tdoc" do
      Tdoc.stub(:find).with("37") { mock_tdoc }
      get :edit, :id => "37"
      assigns(:tdoc).should be(mock_tdoc)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created tdoc as @tdoc" do
        Tdoc.stub(:new).with({'these' => 'params'}) { mock_tdoc(:save => true) }
        post :create, :tdoc => {'these' => 'params'}
        assigns(:tdoc).should be(mock_tdoc)
      end

      it "redirects to the created tdoc" do
        Tdoc.stub(:new) { mock_tdoc(:save => true) }
        post :create, :tdoc => {}
        response.should redirect_to(:controller =>:tdocs,:action=>'show',:format=>:js,:id=>mock_tdoc.id)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tdoc as @tdoc" do
        Tdoc.stub(:new).with({'these' => 'params'}) { mock_tdoc(:save => false) }
        post :create, :tdoc => {'these' => 'params'}
        assigns(:tdoc).should be(mock_tdoc)
      end

      it "re-renders the 'new' template" do
        Tdoc.stub(:new) { mock_tdoc(:save => false) }
        post :create, :tdoc => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested tdoc" do
        Tdoc.stub(:find).with("37") { mock_tdoc }
        mock_tdoc.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :tdoc => {'these' => 'params'}
      end

      it "assigns the requested tdoc as @tdoc" do
        Tdoc.stub(:find) { mock_tdoc(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:tdoc).should be(mock_tdoc)
      end

      it "redirects to the tdoc" do
        Tdoc.stub(:find) { mock_tdoc(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(:controller =>:tdocs,:action=>'show',:format=>:js,:id=>mock_tdoc.id)
      end
    end

    describe "with invalid params" do
      it "assigns the tdoc as @tdoc" do
        Tdoc.stub(:find) { mock_tdoc(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:tdoc).should be(mock_tdoc)
      end

      it "re-renders the 'edit' template" do
        Tdoc.stub(:find) { mock_tdoc(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested tdoc" do
      Tdoc.stub(:find).with("37") { mock_tdoc }
      mock_tdoc.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    #it "redirects to the tdocs list" do
    #  Tdoc.stub(:find) { mock_tdoc }
    #  delete :destroy, :id => "1"
    #  response.should redirect_to(tdocs_url)
    #end
  end

end
