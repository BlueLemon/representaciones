require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe PagosController do

  def setup
    @ability = double(CanCan::Ability)
    # TODO can do everything
    @ability.stub(:can) { true }
    controller.stub(:current_ability).returns(@ability)
  end
  
  def mock_pago(stubs={})
    @mock_pago ||= mock_model(Pago, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all pagos as @pagos" do
      Pago.stub(:all) { [mock_pago] }
      get :index
      #assigns(:pagos).should eq([mock_pago])
      assigns(:pagos).should eq([])
    end
  end

  describe "GET show" do
    it "assigns the requested pago as @pago" do
      Pago.stub(:find).with("37") { mock_pago }
      get :show, :id => "37"
      assigns(:pago).should be(mock_pago)
    end
  end

  describe "GET new" do
    it "assigns a new pago as @pago" do
      Pago.stub(:new) { mock_pago }
      get :new
      assigns(:pago).should be(mock_pago)
    end
  end

  describe "GET edit" do
    it "assigns the requested pago as @pago" do
      Pago.stub(:find).with("37") { mock_pago }
      get :edit, :id => "37"
      assigns(:pago).should be(mock_pago)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created pago as @pago" do
        Pago.stub(:new).with({'these' => 'params'}) { mock_pago(:save => true) }
        post :create, :pago => {'these' => 'params'}
        assigns(:pago).should be(mock_pago)
      end

      it "redirects to the created pago" do
        Pago.stub(:new) { mock_pago(:save => true) }
        post :create, :pago => {}
        response.should redirect_to(:controller =>:pagos,:action=>'show',:format=>:js,:id=>mock_pago.id)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved pago as @pago" do
        Pago.stub(:new).with({'these' => 'params'}) { mock_pago(:save => false) }
        post :create, :pago => {'these' => 'params'}
        assigns(:pago).should be(mock_pago)
      end

      it "re-renders the 'new' template" do
        Pago.stub(:new) { mock_pago(:save => false) }
        post :create, :pago => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested pago" do
        Pago.stub(:find).with("37") { mock_pago }
        mock_pago.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :pago => {'these' => 'params'}
      end

      it "assigns the requested pago as @pago" do
        Pago.stub(:find) { mock_pago(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:pago).should be(mock_pago)
      end

      it "redirects to the pago" do
        Pago.stub(:find) { mock_pago(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(:controller =>:pagos,:action=>'show',:format=>:js,:id=>mock_pago.id)
      end
    end

    describe "with invalid params" do
      it "assigns the pago as @pago" do
        Pago.stub(:find) { mock_pago(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:pago).should be(mock_pago)
      end

      it "re-renders the 'edit' template" do
        Pago.stub(:find) { mock_pago(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested pago" do
      Pago.stub(:find).with("37") { mock_pago }
      mock_pago.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    #it "redirects to the pagos list" do
    #  Pago.stub(:find) { mock_pago }
    #  delete :destroy, :id => "1"
    #  response.should redirect_to(pagos_url)
    #end
  end

end
